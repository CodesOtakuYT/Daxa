#include "Scancodes.hpp"

namespace daxa {
	const char* keyScancodeToString(Scancode key) {
		const char* ret = nullptr;
		switch (key) {
		case Scancode::UNKNOWN: ret = "UNKNOWN"; break;
		case Scancode::A: ret = "A"; break;
		case Scancode::B: ret = "B"; break;
		case Scancode::C: ret = "C"; break;
		case Scancode::D: ret = "D"; break;
		case Scancode::E: ret = "E"; break;
		case Scancode::F: ret = "F"; break;
		case Scancode::G: ret = "G"; break;
		case Scancode::H: ret = "H"; break;
		case Scancode::I: ret = "I"; break;
		case Scancode::J: ret = "J"; break;
		case Scancode::K: ret = "K"; break;
		case Scancode::L: ret = "L"; break;
		case Scancode::M: ret = "M"; break;
		case Scancode::N: ret = "N"; break;
		case Scancode::O: ret = "O"; break;
		case Scancode::P: ret = "P"; break;
		case Scancode::Q: ret = "Q"; break;
		case Scancode::R: ret = "R"; break;
		case Scancode::S: ret = "S"; break;
		case Scancode::T: ret = "T"; break;
		case Scancode::U: ret = "U"; break;
		case Scancode::V: ret = "V"; break;
		case Scancode::W: ret = "W"; break;
		case Scancode::X: ret = "X"; break;
		case Scancode::Y: ret = "Y"; break;
		case Scancode::Z: ret = "Z"; break;
		case Scancode::N1: ret = "N1"; break;
		case Scancode::N2: ret = "N2"; break;
		case Scancode::N3: ret = "N3"; break;
		case Scancode::N4: ret = "N4"; break;
		case Scancode::N5: ret = "N5"; break;
		case Scancode::N6: ret = "N6"; break;
		case Scancode::N7: ret = "N7"; break;
		case Scancode::N8: ret = "N8"; break;
		case Scancode::N9: ret = "N9"; break;
		case Scancode::N0: ret = "N0"; break;
		case Scancode::RETURN: ret = "RETURN"; break;
		case Scancode::ESCAPE: ret = "ESCAPE"; break;
		case Scancode::BACKSPACE: ret = "BACKSPACE"; break;
		case Scancode::TAB: ret = "TAB"; break;
		case Scancode::SPACE: ret = "SPACE"; break;
		case Scancode::MINUS: ret = "MINUS"; break;
		case Scancode::EQUALS: ret = "EQUALS"; break;
		case Scancode::LEFTBRACKET: ret = "LEFTBRACKET"; break;
		case Scancode::RIGHTBRACKET: ret = "RIGHTBRACKET"; break;
		case Scancode::BACKSLASH: ret = "BACKSLASH"; break;
		case Scancode::NONUSHASH: ret = "NONUSHASH"; break;
		case Scancode::SEMICOLON: ret = "SEMICOLON"; break;
		case Scancode::APOSTROPHE: ret = "APOSTROPHE"; break;
		case Scancode::GRAVE: ret = "GRAVE"; break;
		case Scancode::COMMA: ret = "COMMA"; break;
		case Scancode::PERIOD: ret = "PERIOD"; break;
		case Scancode::SLASH: ret = "SLASH"; break;
		case Scancode::CAPSLOCK: ret = "CAPSLOCK"; break;
		case Scancode::F1: ret = "F1"; break;
		case Scancode::F2: ret = "F2"; break;
		case Scancode::F3: ret = "F3"; break;
		case Scancode::F4: ret = "F4"; break;
		case Scancode::F5: ret = "F5"; break;
		case Scancode::F6: ret = "F6"; break;
		case Scancode::F7: ret = "F7"; break;
		case Scancode::F8: ret = "F8"; break;
		case Scancode::F9: ret = "F9"; break;
		case Scancode::F10: ret = "F10"; break;
		case Scancode::F11: ret = "F11"; break;
		case Scancode::F12: ret = "F12"; break;
		case Scancode::PRINTSCREEN: ret = "PRINTSCREEN"; break;
		case Scancode::SCROLLLOCK: ret = "SCROLLLOCK"; break;
		case Scancode::PAUSE: ret = "PAUSE"; break;
		case Scancode::INSERT: ret = "INSERT"; break;
		case Scancode::HOME: ret = "HOME"; break;
		case Scancode::PAGEUP: ret = "PAGEUP"; break;
		case Scancode::DELETE: ret = "DELETE"; break;
		case Scancode::END: ret = "END"; break;
		case Scancode::PAGEDOWN: ret = "PAGEDOWN"; break;
		case Scancode::RIGHT: ret = "RIGHT"; break;
		case Scancode::LEFT: ret = "LEFT"; break;
		case Scancode::DOWN: ret = "DOWN"; break;
		case Scancode::UP: ret = "UP"; break;
		case Scancode::NUMLOCKCLEAR: ret = "NUMLOCKCLEAR"; break;
		case Scancode::NP_DIVIDE: ret = "NP_DIVIDE"; break;
		case Scancode::NP_MULTIPLY: ret = "NP_MULTIPLY"; break;
		case Scancode::NP_MINUS: ret = "NP_MINUS"; break;
		case Scancode::NP_PLUS: ret = "NP_PLUS"; break;
		case Scancode::NP_ENTER: ret = "NP_ENTER"; break;
		case Scancode::NP_1: ret = "NP_1"; break;
		case Scancode::NP_2: ret = "NP_2"; break;
		case Scancode::NP_3: ret = "NP_3"; break;
		case Scancode::NP_4: ret = "NP_4"; break;
		case Scancode::NP_5: ret = "NP_5"; break;
		case Scancode::NP_6: ret = "NP_6"; break;
		case Scancode::NP_7: ret = "NP_7"; break;
		case Scancode::NP_8: ret = "NP_8"; break;
		case Scancode::NP_9: ret = "NP_9"; break;
		case Scancode::NP_0: ret = "NP_0"; break;
		case Scancode::NP_PERIOD: ret = "NP_PERIOD"; break;
		case Scancode::NONUSBACKSLASH: ret = "NONUSBACKSLASH"; break;
		case Scancode::APPLICATION: ret = "APPLICATION"; break;
		case Scancode::POWER: ret = "POWER"; break;
		case Scancode::NP_EQUALS: ret = "NP_EQUALS"; break;
		case Scancode::F13: ret = "F13"; break;
		case Scancode::F14: ret = "F14"; break;
		case Scancode::F15: ret = "F15"; break;
		case Scancode::F16: ret = "F16"; break;
		case Scancode::F17: ret = "F17"; break;
		case Scancode::F18: ret = "F18"; break;
		case Scancode::F19: ret = "F19"; break;
		case Scancode::F20: ret = "F20"; break;
		case Scancode::F21: ret = "F21"; break;
		case Scancode::F22: ret = "F22"; break;
		case Scancode::F23: ret = "F23"; break;
		case Scancode::F24: ret = "F24"; break;
		case Scancode::EXECUTE: ret = "EXECUTE"; break;
		case Scancode::HELP: ret = "HELP"; break;
		case Scancode::MENU: ret = "MENU"; break;
		case Scancode::SELECT: ret = "SELECT"; break;
		case Scancode::STOP: ret = "STOP"; break;
		case Scancode::AGAIN: ret = "AGAIN"; break;
		case Scancode::UNDO: ret = "UNDO"; break;
		case Scancode::CUT: ret = "CUT"; break;
		case Scancode::COPY: ret = "COPY"; break;
		case Scancode::PASTE: ret = "PASTE"; break;
		case Scancode::FIND: ret = "FIND"; break;
		case Scancode::MUTE: ret = "MUTE"; break;
		case Scancode::VOLUMEUP: ret = "VOLUMEUP"; break;
		case Scancode::VOLUMEDOWN: ret = "VOLUMEDOWN"; break;
		case Scancode::NP_COMMA: ret = "NP_COMMA"; break;
		case Scancode::NP_EQUALSAS400: ret = "NP_EQUALSAS400"; break;
		case Scancode::INTERNATIONAL1: ret = "INTERNATIONAL1"; break;
		case Scancode::INTERNATIONAL2: ret = "INTERNATIONAL2"; break;
		case Scancode::INTERNATIONAL3: ret = "INTERNATIONAL3"; break;
		case Scancode::INTERNATIONAL4: ret = "INTERNATIONAL4"; break;
		case Scancode::INTERNATIONAL5: ret = "INTERNATIONAL5"; break;
		case Scancode::INTERNATIONAL6: ret = "INTERNATIONAL6"; break;
		case Scancode::INTERNATIONAL7: ret = "INTERNATIONAL7"; break;
		case Scancode::INTERNATIONAL8: ret = "INTERNATIONAL8"; break;
		case Scancode::INTERNATIONAL9: ret = "INTERNATIONAL9"; break;
		case Scancode::LANG1: ret = "LANG1"; break;
		case Scancode::LANG2: ret = "LANG2"; break;
		case Scancode::LANG3: ret = "LANG3"; break;
		case Scancode::LANG4: ret = "LANG4"; break;
		case Scancode::LANG5: ret = "LANG5"; break;
		case Scancode::LANG6: ret = "LANG6"; break;
		case Scancode::LANG7: ret = "LANG7"; break;
		case Scancode::LANG8: ret = "LANG8"; break;
		case Scancode::LANG9: ret = "LANG9"; break;
		case Scancode::ALTERASE: ret = "ALTERASE"; break;
		case Scancode::SYSREQ: ret = "SYSREQ"; break;
		case Scancode::CANCEL: ret = "CANCEL"; break;
		case Scancode::CLEAR: ret = "CLEAR"; break;
		case Scancode::PRIOR: ret = "PRIOR"; break;
		case Scancode::RETURN2: ret = "RETURN2"; break;
		case Scancode::SEPARATOR: ret = "SEPARATOR"; break;
		case Scancode::OUT: ret = "OUT"; break;
		case Scancode::OPER: ret = "OPER"; break;
		case Scancode::CLEARAGAIN: ret = "CLEARAGAIN"; break;
		case Scancode::CRSEL: ret = "CRSEL"; break;
		case Scancode::EXSEL: ret = "EXSEL"; break;
		case Scancode::NP_00: ret = "NP_00"; break;
		case Scancode::NP_000: ret = "NP_000"; break;
		case Scancode::THOUSANDSSEPARATOR: ret = "THOUSANDSSEPARATOR"; break;
		case Scancode::DECIMALSEPARATOR: ret = "DECIMALSEPARATOR"; break;
		case Scancode::CURRENCYUNIT: ret = "CURRENCYUNIT"; break;
		case Scancode::CURRENCYSUBUNIT: ret = "CURRENCYSUBUNIT"; break;
		case Scancode::NP_LEFTPAREN: ret = "NP_LEFTPAREN"; break;
		case Scancode::NP_RIGHTPAREN: ret = "NP_RIGHTPAREN"; break;
		case Scancode::NP_LEFTBRACE: ret = "NP_LEFTBRACE"; break;
		case Scancode::NP_RIGHTBRACE: ret = "NP_RIGHTBRACE"; break;
		case Scancode::NP_TAB: ret = "NP_TAB"; break;
		case Scancode::NP_BACKSPACE: ret = "NP_BACKSPACE"; break;
		case Scancode::NP_A: ret = "NP_A"; break;
		case Scancode::NP_B: ret = "NP_B"; break;
		case Scancode::NP_C: ret = "NP_C"; break;
		case Scancode::NP_D: ret = "NP_D"; break;
		case Scancode::NP_E: ret = "NP_E"; break;
		case Scancode::NP_F: ret = "NP_F"; break;
		case Scancode::NP_XOR: ret = "NP_XOR"; break;
		case Scancode::NP_POWER: ret = "NP_POWER"; break;
		case Scancode::NP_PERCENT: ret = "NP_PERCENT"; break;
		case Scancode::NP_LESS: ret = "NP_LESS"; break;
		case Scancode::NP_GREATER: ret = "NP_GREATER"; break;
		case Scancode::NP_AMPERSAND: ret = "NP_AMPERSAND"; break;
		case Scancode::NP_DBLAMPERSAND: ret = "NP_DBLAMPERSAND"; break;
		case Scancode::NP_VERTICALBAR: ret = "NP_VERTICALBAR"; break;
		case Scancode::NP_DBLVERTICALBAR: ret = "NP_DBLVERTICALBAR"; break;
		case Scancode::NP_COLON: ret = "NP_COLON"; break;
		case Scancode::NP_HASH: ret = "NP_HASH"; break;
		case Scancode::NP_SPACE: ret = "NP_SPACE"; break;
		case Scancode::NP_AT: ret = "NP_AT"; break;
		case Scancode::NP_EXCLAM: ret = "NP_EXCLAM"; break;
		case Scancode::NP_MEMSTORE: ret = "NP_MEMSTORE"; break;
		case Scancode::NP_MEMRECALL: ret = "NP_MEMRECALL"; break;
		case Scancode::NP_MEMCLEAR: ret = "NP_MEMCLEAR"; break;
		case Scancode::NP_MEMADD: ret = "NP_MEMADD"; break;
		case Scancode::NP_MEMSUBTRACT: ret = "NP_MEMSUBTRACT"; break;
		case Scancode::NP_MEMMULTIPLY: ret = "NP_MEMMULTIPLY"; break;
		case Scancode::NP_MEMDIVIDE: ret = "NP_MEMDIVIDE"; break;
		case Scancode::NP_PLUSMINUS: ret = "NP_PLUSMINUS"; break;
		case Scancode::NP_CLEAR: ret = "NP_CLEAR"; break;
		case Scancode::NP_CLEARENTRY: ret = "NP_CLEARENTRY"; break;
		case Scancode::NP_BINARY: ret = "NP_BINARY"; break;
		case Scancode::NP_OCTAL: ret = "NP_OCTAL"; break;
		case Scancode::NP_DECIMAL: ret = "NP_DECIMAL"; break;
		case Scancode::NP_HEXADECIMAL: ret = "NP_HEXADECIMAL"; break;
		case Scancode::LCTRL: ret = "LCTRL"; break;
		case Scancode::LSHIFT: ret = "LSHIFT"; break;
		case Scancode::LALT: ret = "LALT"; break;
		case Scancode::LGUI: ret = "LGUI"; break;
		case Scancode::RCTRL: ret = "RCTRL"; break;
		case Scancode::RSHIFT: ret = "RSHIFT"; break;
		case Scancode::RALT: ret = "RALT"; break;
		case Scancode::RGUI: ret = "RGUI"; break;
		case Scancode::MODE: ret = "MODE"; break;
		case Scancode::AUDIONEXT: ret = "AUDIONEXT"; break;
		case Scancode::AUDIOPREV: ret = "AUDIOPREV"; break;
		case Scancode::AUDIOSTOP: ret = "AUDIOSTOP"; break;
		case Scancode::AUDIOPLAY: ret = "AUDIOPLAY"; break;
		case Scancode::AUDIOMUTE: ret = "AUDIOMUTE"; break;
		case Scancode::MEDIASELECT: ret = "MEDIASELECT"; break;
		case Scancode::WWW: ret = "WWW"; break;
		case Scancode::MAIL: ret = "MAIL"; break;
		case Scancode::CALCULATOR: ret = "CALCULATOR"; break;
		case Scancode::COMPUTER: ret = "COMPUTER"; break;
		case Scancode::AC_SEARCH: ret = "AC_SEARCH"; break;
		case Scancode::AC_HOME: ret = "AC_HOME"; break;
		case Scancode::AC_BACK: ret = "AC_BACK"; break;
		case Scancode::AC_FORWARD: ret = "AC_FORWARD"; break;
		case Scancode::AC_STOP: ret = "AC_STOP"; break;
		case Scancode::AC_REFRESH: ret = "AC_REFRESH"; break;
		case Scancode::AC_BOOKMARKS: ret = "AC_BOOKMARKS"; break;
		case Scancode::BRIGHTNESSDOWN: ret = "BRIGHTNESSDOWN"; break;
		case Scancode::BRIGHTNESSUP: ret = "BRIGHTNESSUP"; break;
		case Scancode::DISPLAYSWITCH: ret = "DISPLAYSWITCH"; break;
		case Scancode::KBDILLUMTOGGLE: ret = "KBDILLUMTOGGLE"; break;
		case Scancode::KBDILLUMDOWN: ret = "KBDILLUMDOWN"; break;
		case Scancode::KBDILLUMUP: ret = "KBDILLUMUP"; break;
		case Scancode::EJECT: ret = "EJECT"; break;
		case Scancode::SLEEP: ret = "SLEEP"; break;
		case Scancode::APP1: ret = "APP1"; break;
		case Scancode::APP2: ret = "APP2"; break;
		case Scancode::AUDIOREWIND: ret = "AUDIOREWIND"; break;
		case Scancode::AUDIOFASTFORWARD: ret = "AUDIOFASTFORWARD"; break;
		default: ret = "UNKNOWN"; break;
		}
		return ret;
	}

	std::ostream& operator<<(std::ostream& os, Scancode key) {
		return os << keyScancodeToString(key);
	}
}
